#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "introprog_input_merge_sort.h"

/*
 * Diese Funktion fügt zwei bereits sortierte Arrays zu einem
 * sortierten Array zusammen
 *
 * array : Pointer auf das Array
 * first : Index des ersten Elemements (Beginn) des (Teil-)Array
 * middle: Index des mittleren Elements des (Teil-)Array
 * last  : Index des Letzten Elements (Ende) des (Teil-)Array
 */
void merge(int* array, int first, int middle, int last)
{
   int *arrayB = (int*) malloc ((last-first +2) * sizeof(int));
   int k = first;
   int m = middle +1;
   int i = 1;
   int j = 1;
 
   while(k <= middle && m <=last){
    if(array[k]<=array[m]){
      arrayB[i] = array[k];
      k++;
    } 
    else {
      arrayB[i]=array[m];
      m++;
    }
    
    i++;
  }

  while(k<=middle){
    arrayB[i]= array[k];
    k++;
    i++;

  }

  while(m<=last){
    arrayB[i] =array[m];
    m++;
    i++;
  }

  while(j<i){
    array[first+j-1] =*(arrayB+j);
    j++;
    
  }
  free(arrayB);
  // HIER Funktion merge() implementieren
   
}

/*
 * Diese Funktion implementiert den iterativen Mergesort
 * Algorithmus auf einem Array. Sie soll analog zum Pseudocode
 * implementiert werden.
 *
 * array:  Pointer auf das Array
 * last :  Index des letzten Elements
 */
void merge_sort(int* array, int last)
{
    int step =1;
    int middle=0;
    int left;
    int right=0;
    while(step<=last){
        left=0;
        while(left<=last-step){
           middle= left+step-1;
           middle= ((middle<last)?middle:last);
           right= left+ 2*step-1;
           right= ((right<last)?right:last);
           merge(array,left,middle,right);
           left= left+ 2*step; 
        }
        step=step*2;
    }// HIER Funktion merge_sort() implementieren
  
  }


/*
 * Hauptprogramm.
 *
 * Liest Integerwerte aus einer Datei und gibt diese sortiert im
 * selben Format über die Standardausgabe wieder aus.
 *
 * Aufruf: ./introprog_merge_sort_iterativ <maximale anzahl> \
 * 	   <dateipfad>
 */
int main (int argc, char *argv[])
{
    if (argc!=3){
        printf ("usage: %s <maximale anzahl>  <dateipfad>\n", argv[0]);
        exit(2);
    }
    
    char *filename = argv[2];
    int groesse = atof(argv[1]);
    // Hier array initialisieren
    int *array = (int*)malloc (groesse* sizeof(int));
    int len = read_array_from_file(array, atoi(argv[1]), filename);

    printf("Eingabe:\n"); 
    print_array(array, len);

    // HIER Aufruf von "merge_sort()"
    merge_sort(array, len-1);

    printf("Sortiert:\n");
    print_array(array, len);

    free(array);
    return 0;
}
