#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "introprog_telefonbuch.h"

/*
 * Fügt einen Knoten mit der Telefonnummer phone und dem Namen name
 * in den Binären Suchbaum bst ein.  Für den Suchbaum soll die
 * Eigenschaft gelten, dass alle linken Kinder einen Wert kleiner
 * gleich (<=) und alle rechten Kinder einen Wert größer (>) haben.
 */
void bst_insert_node(bstree* bst, unsigned long phone, char *name) {
    /*bst_node* node=(*bst_node) malloc (sizeof(bst_node));
    node->phone=phone;
    node->name=name;
    node->left=NULL;
    node->right=NULL;
    node->parent=NULL;
    
    bst_node* y= NULL;
    bst_node* x= bst->root;
    while(x != NULL){
        y=x;
        if(node->phone < x->phone){
            x =x->left;
        } 
        if(node->phone > x->phone){
            x= x->right;
        }
        if(node->phone==x->phone){
            printf("Telefonnummer existiert bereits!");
            return;
        }
    }
    
    node->parent=y;
    if(y==NULL){
        bst->root =node;
    } else{
        if(node->phone< y->phone){
            y->left=node;
        } 
        if(node->phone > y->phone) {
            y->right=node;
        }
        else{
            printf("Telefonnummer exisitert bereits!");
            return;
        }
    }
}
*/
bst_node *node = malloc(sizeof(bst_node));
  node->phone = phone;

  size_t len_des_namen = strlen(name);
  node->name = malloc(len_des_namen + 1);
  strncpy(node->name, name, len_des_namen + 1);

  node->left =NULL;
  node->right =NULL;
  node->parent =NULL;

  if (bst->root == NULL) {
    bst->root = node;
    return;
  }
  else{
    bst_node* x = bst->root; // x ist hier die Wurzel
    while (x != NULL) {

      if(phone < x->phone) {

        if (x->left == NULL) {

          x->left = node;
          return;

        } 
        else {
          x = x->left;
        }
      }
      else if (phone > x->phone) {

        if (x->right == NULL) {

          x->right = node;
          return;

        } 
        else {
          x = x->right;
        }
      } 
      else {
        printf("Die von Ihnen eingegebene Telefonnummer existiert bereits!\n");
        free(node->name);
        free(node);
        return;
      }
    }
  }
}

/*
 * Diese Funktion liefert einen Zeiger auf einen Knoten im Baum mit
 * dem Wert phone zurück, falls dieser existiert.  Ansonsten wird
 * NULL zurückgegeben.
 */
bst_node* find_node(bstree* bst, unsigned long phone) { 
  if (bst->root == NULL) {
    return NULL;
  }

  bst_node* x = bst->root; // x ist das jetzige Element
  while (x != NULL) {
    if (phone == x->phone) {
      return x;
    } 
    else if (phone < x->phone) {
      x = x->left;
    } 
    else {
      x = x->right;
    }
  }
  return NULL;

    /*while(bst != NULL && phone != key(bst)){
        if(phone < key(bst)){
                bst =lc(bst);
            }
         else{
         bst=rc(bst);
        }
    } return bst;*/

}
/* Gibt den Unterbaum von node in "in-order" Reihenfolge aus */
void bst_in_order_walk_node(bst_node* node) {
    if(node!= NULL){
        bst_in_order_walk_node(node->left);
        print_node(node);
        bst_in_order_walk_node(node->right);
    }
}

/* 
 * Gibt den gesamten Baum bst in "in-order" Reihenfolge aus.  Die
 * Ausgabe dieser Funktion muss aufsteigend soriert sein.
 */
void bst_in_order_walk(bstree* bst) {
    if (bst != NULL) {
        bst_in_order_walk_node(bst->root);
    }
}

/*
 * Löscht den Teilbaum unterhalb des Knotens node rekursiv durch
 * "post-order" Traversierung, d.h. zurerst wird der linke und dann
 * der rechte Teilbaum gelöscht.  Anschließend wird der übergebene
 * Knoten gelöscht.
 */
void bst_free_subtree(bst_node* node) {
    if(node!= NULL){
        bst_free_subtree(node->left);
        bst_free_subtree(node->right);
        free(node->name);
        free(node);
    }
}

/* 
 * Löscht den gesamten Baum bst und gibt den entsprechenden
 * Speicher frei.
 */
void bst_free_tree(bstree* bst) {
    if(bst != NULL && bst->root != NULL) {
        bst_free_subtree(bst->root);
        bst->root = NULL;
    }
}
